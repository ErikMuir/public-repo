#!/bin/bash
set -e

print_help () {
  echo "Clone all repos from a github account"
  echo "Usage: git-clone-all <account> [options]..."
  echo "  <account>		(required) the name of a github account"
  echo "  options:"
  echo "    -p, --path		the destination path (defaults to ./)"
  echo "    -f, --force		force clone even if folder exists"
  echo "    -h, --help		display this help and exit"
}

print_usage () {
  echo "Usage: git-clone-all <account> [options]..."
  echo "Try 'git-clone-all --help' for more information."
}

process_repo () {
  repo=$1
  name=$(echo $repo | jq .[0] | xargs)
  url=$(echo $repo | jq .[1] | xargs)
  repo_path="${path}${name}"
  echo ""
  if [ -d "${repo_path}" ]; then
    [ $force = false ] && echo "Skipping ${name} - already exists" && return 0
    rm -rf $repo_path
  fi
  git clone $url $repo_path
}

# Set defaults
path="./"
force=false

# Ensure at least one argument or option
[[ $# -eq 0 ]] && print_usage && exit 1

# Handle required arguments
if [[ $1 != -* ]]; then
  account=$1
  shift
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
    "--help" )  set -- "$@" "-h" ;;
    "--path" )  set -- "$@" "-p" ;;
    "--force" ) set -- "$@" "-f" ;;
    * )         set -- "$@" "$arg"
  esac
done

# Parse short options
OPTIND=1
while getopts ":hp:f" opt
do
  case ${opt} in
    h )  print_help; exit 0 ;;
    p )  path="$OPTARG" ;;
    f )  force=true ;;
    \? ) echo "Invalid option: $OPTARG" 1>&2; exit 1 ;;
    : )  echo "Invalid option: $OPTARG requires an argument" 1>&2; exit 1 ;;
  esac
done

# Ensure required arguments were provided
if [ -z "$account" ]; then print_usage; exit 1; fi

# Ensure path has trailing slash
path_length=${#path}
last_char=${path:path_length-1:1}
[[ $last_char != "/" ]] && path="${path}/";

# Get list of repos for account
repos=$(curl -s "https://api.github.com/users/${account}/repos" | jq "[.[] | [.name, .ssh_url]]" | jq -c ".[]")

# Loop through repos and clone as necessary
for repo in $repos; do
  process_repo $repo
done
